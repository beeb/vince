// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package lo

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type City struct {
	_tab flatbuffers.Table
}

func GetRootAsCity(buf []byte, offset flatbuffers.UOffsetT) *City {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &City{}
	x.Init(buf, n+offset)
	return x
}

func FinishCityBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCity(buf []byte, offset flatbuffers.UOffsetT) *City {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &City{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCityBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *City) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *City) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *City) Code() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *City) MutateCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *City) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *City) Flag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CityStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CityAddCode(builder *flatbuffers.Builder, code uint32) {
	builder.PrependUint32Slot(0, code, 0)
}
func CityAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func CityAddFlag(builder *flatbuffers.Builder, flag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(flag), 0)
}
func CityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
