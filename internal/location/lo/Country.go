// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package lo

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Country struct {
	_tab flatbuffers.Table
}

func GetRootAsCountry(buf []byte, offset flatbuffers.UOffsetT) *Country {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Country{}
	x.Init(buf, n+offset)
	return x
}

func FinishCountryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCountry(buf []byte, offset flatbuffers.UOffsetT) *Country {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Country{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCountryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Country) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Country) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Country) Alpha2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Country) Alpha3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Country) Flag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Country) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CountryStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CountryAddAlpha2(builder *flatbuffers.Builder, alpha2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(alpha2), 0)
}
func CountryAddAlpha3(builder *flatbuffers.Builder, alpha3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(alpha3), 0)
}
func CountryAddFlag(builder *flatbuffers.Builder, flag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(flag), 0)
}
func CountryAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func CountryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
